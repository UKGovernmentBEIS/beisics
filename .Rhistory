getwd()
?beis_logo
?beis_logo()
check()
library(devtools)
check()
?beis_logo
?beis_logo()
beis_logo()
load_all()
?beis_logo
load_all()
?beis_logo
load_all()
?beis_logo
document()
?beis_logo
use_testthat()
class(getwd())
use_test("beis_logo")
test()
input <- getwd()
test()
test()
file_exists <- file.exists(paste0(copy_to, "/beis_logo.png")|paste0(copy_to, "/beis_logo_white.png"))
copy_to <- "P:/"
copy_to <- "P:"
file_exists <- file.exists(paste0(copy_to, "/beis_logo.png")|paste0(copy_to, "/beis_logo_white.png"))
file_exists <- file.exists(paste0(copy_to, "/beis_logo.png"))
file_exists_col <- file.exists(paste0(copy_to, "/beis_logo.png"))
file_exists_white <- file.exists(paste0(copy_to, "/beis_logo_white.png"))
file_exists <- ifelse(file_exists_col == TRUE | file_exists_white == TRUE, TRUE, FALSE)
test()
test()
usethis::use_package("assertthat")
load_all()
check()
use_package("testthat")
check()
document()
test()
check()
use_testthat()
use_package("assertthat")
check(cran=FALSE)
document()
check(cran=FALSE)
document()
check(cran=FALSE)
load_all()
setwd("//Cbas-pdfs-01/per/andrewsa/Projects/beisics/R")
library(devtools)
load_all()
check()
check()
check()
library(testthat)
library(assertthat)
check()
check()
test()
check(CRAN = FALSE)
check(cran = FALSE)
check(cran = FALSE)
check(cran = FALSE)
# build a function
usethis::use_r(name = "add_beis_css")
help(govdown)
load_all()
check(cran = FALSE)
document()
document()
?add_beis_css
use_test("add_beis_css")
test()
load_all()
add_beis_css()
file.exists(add_beis_css())
test()
load_all()
shiny::includeCSS(add_beis_css())
load_all()
check(cran = FALSE)
test()
test()
check(cran = FALSE)
load_all()
check(cran = FALSE)
load_all()
# build a function
usethis::use_r(name = "add_beis_css")
test()
test()
check(cran = FALSE)
check(cran = FALSE)
add_beis_css()
check(cran = FALSE)
load_all()
test()
check(cran = FALSE)
output <- add_beis_css()
testthat::expect_is(output, "character")
testthat::expect_equal(file.exists(output), TRUE)
file.exists(output)
document()
test()
document()
test()
load_all()
check(cran = FALSE)
document()
check(cran = FALSE)
usethis::use_r(name = "get_beisics")
document()
use_test("get_beisics")
output1 <- get_beis_logo(copy_to = copy_to, white_type = white_type)
copy_to <- "P:/"
white_type <- TRUE
output1 <- get_beis_logo(copy_to = copy_to, white_type = white_type)
output2 <- get_beis_css(copy_to = copy_to)
output <- (output2 == output1)
output <- (output == TRUE)
output <- (output1 == TRUE) & (output2 == output1)
document()
document()
test()
load_all()
check(cran = FALSE)
# build a function
usethis::use_r(name = "theme_beis")
usethis::use_package("ggplot2")
library(ggplot2)
document()
document()
document()
use_test("theme_beis")
p <- ggplot2::ggplot(mtcars) +
geom_point(aes(x = wt, y = mpg, colour = gear))
p + theme_beis()
load_all()
p + theme_beis()
p
class(theme_beis())
output <- p + theme_beis()
class(output)
test()
test()
document()
load_all()
check(cran = FALSE)
document()
load_all()
check(cran = FALSE)
document()
load_all()
check(cran = FALSE)
document()
load_all()
check(cran = FALSE)
load_all()
check(cran = FALSE)
load_all()
check(cran = FALSE)
load_all()
check(cran = FALSE)
# trying a dygraph
dygraphs::dygraph(airquality, xlab = Temp, ylab = Wind)
# trying a dygraph
dygraphs::dygraph(airquality)
# trying a dygraph
dygraphs::dygraph(airquality %>% select(Temp,Wind))
# trying a dygraph
dygraphs::dygraph((airquality %>% select(Temp,Wind)))
# trying a dygraph
dygraphs::dygraph(airquality$Temp)
# trying a dygraph
dygraphs::dygraph(airquality, airquality$Temp, airquality$Ozone)
# trying a dygraph
dygraphs::dygraph(airquality$Ozone)
# trying a dygraph
dygraphs::dygraph(data.frame(airquality$Ozone))
# trying a dygraph
dygraphs::dygraph(data.frame(airquality$Temp))
# trying a dygraph
dygraphs::dygraph(mdeaths)
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths))
library(tidyverse)
library(ggplot2)
## some dummy data
notes <- tibble(
x = c("do", "re", "mi", "so", "fa", "la", "ti"),
y = 1:7)
## some more dummy data
notes_cat <- tibble(
x = c("do", "do", "do", "re", "re", "mi", "so", "so", "fa", "fa", "fa", "fa", "la", "la", "ti")
)
### styling of identity bar chart with ggplot (x plotted against y), using forcats to order factors
notes %>%
mutate(name = fct_reorder(x, desc(y))) %>% # order the data so that we can plot the bars in order, in this case descending
ggplot(aes(x = name, y = y)) + # assign the plot to the ordered data and the value
geom_bar(stat = "identity", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "grey"), axis.line.y.left = element_line(colour = "grey")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
## styling of category count bar chart with ggplot (counting instances of categories in x), using a dataframe to order factors
notes_ordered <- notes_cat %>% count(x, sort = TRUE) %>% pull(x) # assign this df so that the factors will line up in order
notes_cat %>%
ggplot(aes(x = x, y = stat(count))) +
geom_bar(stat = "count", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "grey"), axis.line.y.left = element_line(colour = "grey")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_x_discrete(limits = notes_ordered) + # this reorders the bars in descending order using the df defined above
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE)
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) %>%
dygraphs::dyOptions(colours = RColorBrewer::brewer.pal(2, "Set1"))
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) %>%
dygraphs::dySeries(c("lwr", "fit", "upr"), label = "Deaths") %>%
dygraphs::dyOptions(colours = RColorBrewer::brewer.pal(2, "Set1"))
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) %>%
dygraphs::dySeries(c("lwr"), label = "Deaths") %>%
dygraphs::dyOptions(colours = RColorBrewer::brewer.pal(2, "Set1"))
library(devtools)
load_all()
check(cran = FALSE)
# build a function
usethis::use_r(name = "beis_colours")
RColorBrewer::brewer.pal(2, "Set1")
t <- RColorBrewer::brewer.pal(2, "Set1")
notes_cat %>%
ggplot(aes(x = x, y = stat(count))) +
geom_bar(stat = "count", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "grey"), axis.line.y.left = element_line(colour = "grey"), axis.line.y = element_line(colour = "white")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_x_discrete(limits = notes_ordered) + # this reorders the bars in descending order using the df defined above
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
notes_cat %>%
ggplot(aes(x = x, y = stat(count))) +
geom_bar(stat = "count", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "grey"), axis.line.y = element_line(color = "white")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_x_discrete(limits = notes_ordered) + # this reorders the bars in descending order using the df defined above
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
notes_cat %>%
ggplot(aes(x = x, y = stat(count))) +
geom_bar(stat = "count", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "grey"), axis.line.y.left = element_line(colour = "grey"), axis.line.x = element_line(color = "white")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_x_discrete(limits = notes_ordered) + # this reorders the bars in descending order using the df defined above
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
notes_cat %>%
ggplot(aes(x = x, y = stat(count))) +
geom_bar(stat = "count", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "white"), axis.line.y.left = element_line(colour = "grey"), axis.line.x = element_line(color = "white")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_x_discrete(limits = notes_ordered) + # this reorders the bars in descending order using the df defined above
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
notes_cat %>%
ggplot(aes(x = x, y = stat(count))) +
geom_bar(stat = "count", width = 0.8, fill = "#00447c") + # bar chart with BEIS fill colour
labs(y = "numbers", x = "notes") + # labelling
theme(text = element_text(size = 12), axis.title = element_text(face = "bold"), axis.title.y = element_text(margin = margin(0, 30, 0, 0,"pt")), panel.background = element_rect(fill = "white", color = "white"), panel.grid.major.x = element_line(colour = "grey"), axis.line.x.bottom = element_line(colour = "white"), axis.line.y.left = element_line(colour = "grey")) + # this styles the whole plot with grey grid lines and distance on the margins from labels
scale_x_discrete(limits = notes_ordered) + # this reorders the bars in descending order using the df defined above
scale_y_continuous(expand = c(0,0)) + # this stops there from being a gap between the origin of the y axis and the graphing area
coord_flip()
ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.x = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "white"),
axis.line.y.left = ggplot2::element_line(colour = "grey")
)
colours <- c("#003366", "#0099cc", "#a8b8be", "#ee3d8f", "#9ccd63", "#62c6c2", "#fbb034", "#c2baa9",
"#c5e8ff", "#5b842b", "#505050", "#ec3337", "#9a0e11", "#FFFFFF", "#000000")
colours[1:5]
document()
use_test("beis_colours")
?testthat::expect_type
test()
load_all()
n <- 11
distinct <- TRUE
output <- beis_colours(n = n, distinct = distinct)
load_all()
n <- 11
distinct <- FALSE
output <- beis_colours(n = n, distinct = distinct)
distinct <- TRUE
output <- beis_colours(n = n, distinct = distinct)
test()
document()
check(cran = FALSE)
# build a function
usethis::use_r(name = "beis_logo")
document()
use_test("beis_logo")
test()
test()
copy_to <- "P:/"
white_type <- TRUE
output <- beis_logo(copy_to = copy_to, white_type = white_type)
testthat::expect_is(copy_to, "character")
testthat::expect_is(white_type, "logical")
testthat::expect_is(output, "character")
file_exists_col <- file.exists(paste0(copy_to, "beis_logo.png"))
file_exists_white <- file.exists(paste0(copy_to, "beis_logo_white.png"))
file_exists <- ifelse(file_exists_col == TRUE | file_exists_white == TRUE, TRUE, FALSE)
testthat::expect_equal(file_exists, TRUE)
test()
check(cran = FALSE)
