library(devtools)
load_all()
check(cran = FALSE)
copy_to <- "P:/"
output <- beis_css(copy_to = copy_to)
copy_to <- "P:"
output <- beis_css(copy_to = copy_to)
testthat::expect_is(copy_to, "character")
testthat::expect_is(output, "character")
file_exists <- file.exists(paste0(copy_to, "beis_css.css"))
testthat::expect_equal(file_exists, TRUE)
copy_to <- "P:"
output <- beis_css(copy_to = copy_to)
testthat::expect_is(copy_to, "character")
testthat::expect_is(output, "character")
file_exists <- file.exists(paste0(copy_to, "beis_css.css"))
beis_css(copy_to = copy_to)
output <- beis_css(copy_to = copy_to)
testthat::expect_is(copy_to, "character")
testthat::expect_is(output, "character")
file_exists <- file.exists(paste0(copy_to, "beis_css.css"))
copy_to <- "P:"
output <- beis_css(copy_to = copy_to)
testthat::expect_is(copy_to, "character")
testthat::expect_is(output, "character")
file_exists <- file.exists(paste0(copy_to, "beis_css.css"))
load_all()
check(cran = FALSE)
test()
copy_to <- "P:"
copy_to <- "P:"
white_type <- TRUE
output <- beis_logo(copy_to = copy_to, white_type = white_type)
copy_to <- "P:/"
output <- beis_css(copy_to = copy_to)
testthat::expect_is(copy_to, "character")
testthat::expect_is(output, "character")
file_exists <- file.exists(paste0(copy_to, "beis_css.css"))
copy_to <- "P:/"
white_type <- TRUE
output <- beis_logo(copy_to = copy_to, white_type = white_type)
load_all()
document()
test()
check(cran = FALSE)
load_all()
test()
check(cran = FALSE)
check(cran = FALSE)
check(cran = FALSE)
check(cran = FALSE)
load_all()
load_all()
test()
check(cran = FALSE)
load_all()
load_all()
load_all()
document()
document()
load_all()
test()
check(cran = FALSE)
theme_beis_dygraph <- function(dygraph, ...){
p <- dygraphs::dyAxis(dygraph, "y", drawGrid = FALSE)
p <- dygraphs::dyCSS(p, beis_css())
p <- dygraphs::dyOptions(p, colors = beis_colours())
}
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
output <- theme_beis_dygraph(d)
testthat::expect_s3_class(output, "dygraphs")
class(output)
output
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") theme_beis_dygraph(d)
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
theme_beis_dygraph(d)
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title"), theme_beis_dygraph(d)
theme_beis_dygraph(dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title"))
theme_beis_dygraph(dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title"))
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
theme_beis_dygraph(dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title"))
p <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
theme_beis_dygraph(p)
o <_ theme_beis_dygraph(p)
o <- theme_beis_dygraph(p)
o
load_all()
test()
check(cran = FALSE)
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
p <- theme_beis_dygraph(d)
View(p)
document()
test()
check(cran = FALSE)
test()
document()
check(cran = FALSE)
check(cran = FALSE)
load_all()
test()
document()
check(cran = FALSE)
theme_beis_dygraph <- function(dygraph, copy_to = getwd()){
p <- dygraphs::dyAxis(dygraph, "y", drawGrid = FALSE)
p <- dygraphs::dyCSS(p, beis_css(copy_to))
p <- dygraphs::dyOptions(p, colors = beis_colours())
}
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
d <- dygraphs::dyAxis(d, "y", drawGrid = FALSE)
output <- theme_beis_dygraph(d, copy_to = "P:/")
testthat::expect_s3_class(output, "dygraphs")
output
test()
document()
check(cran = FALSE)
devtools::install_git(
"http://cbas-pdcm-01/all_data_science/beisics",
credentials = git2r::cred_user_pass("andrewsa", getPass::getPass())
)
build(binary=FALSE)
install.packages("P:\Projects\beisics_0.0.0.9000.tar.gz", repos = NULL)
install.packages("P:/Projects/beisics_0.0.0.9000.tar.gz", repos = NULL)
copy_to <- "P:/demo/"
copy_to <- normalizePath(copy_to)
file.copy(system.file("logos/beis_logo_white.png", package = "beisics"), copy_to)
test()
get_beis_logo(copy_to = "P:/demo/", white_type = FALSE)
system.file("logos/beis_logo_white.png", package = "beisics")
load_all()
test()
build(binary=FALSE)
test()
build(binary=FALSE)
install.packages("P:/Projects/beisics_0.0.0.9000.tar.gz", repos = NULL)
load_all()
test()
document()
build(binary=FALSE)
load_all()
test()
document()
check(cran = FALSE)
build(binary=FALSE)
library(beisics)
# styling ggplots
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg, fill = as.factor(gear))) +
ggplot2::geom_bar(stat="identity")
p +
theme_beis()
p +
theme_beis() +
ggplot2::scale_fill_manual(values = beisics::beis_colours(n=5))
# styling dygraphs
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
d <- dygraphs::dyAxis(d, "y", drawGrid = FALSE)
d <- theme_beis_dygraph(d, copy_to = "P:/demo/")
d
# styling dygraphs
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
d <- dygraphs::dyAxis(d, "y", drawGrid = FALSE)
d <- theme_beis_dygraph(d, copy_to = "P:/demo/")
d
# importing the css (mvp)
get_beis_css(copy_to =  "P:/demo/")
# importing the css (mvp)
get_beis_css(copy_to =  "P:/demo/")
# commands to run and build
# must be within the package working directory
library(devtools)
# load what exists so far and check it
load_all()
----------------------------------------------
# install and load
install.packages("P:/Projects/beisics_0.0.0.9000.tar.gz", repos = NULL)
library(beisics)
# importing the logos (mvp)
?get_beis_logo()
get_beis_logo(copy_to = "P:/demo/", white_type = FALSE)
get_beis_logo(copy_to = "P:/demo/", white_type = TRUE)
# importing the css (mvp)
get_beis_css(copy_to =  "P:/demo/")
# wrapper functions
beis_logo(copy_to = "P:/demo/", white_type = FALSE)
beis_css(copy_to =  "P:/demo/")
# colours
?beis_colours
beis_colours(n = 15)
beis_colours(n = 15, distinct = TRUE)
# styling ggplots
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg, fill = as.factor(gear))) +
ggplot2::geom_bar(stat="identity")
p
p +
theme_beis()
p +
theme_beis() +
ggplot2::scale_fill_manual(values = beisics::beis_colours(n=5))
# styling dygraphs
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title")
d <- dygraphs::dyAxis(d, "y", drawGrid = FALSE)
d
d <- theme_beis_dygraph(d, copy_to = "P:/demo/")
d
# load what exists so far and check it
load_all()
document()
check(cran = FALSE)
# when happy, build without binaries to create gz file
build(binary=FALSE)
