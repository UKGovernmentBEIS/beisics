ggtheme = `ggplot2`::theme_light,
colors = c("#6D9EC1", "white", "#E46726"),
p.mat = vacDivCorP,
sig.level = 0.05,
insig = "blank",
lab = TRUE) +
labs(title = "Significant correlations between text elements and percentage applicants",
subtitle = "Correlations with the percentage applicants are weak at best")
# set up connection details whether RStudio or desktop
b_server <- as.logical(Sys.info()["sysname"] == "Linux")
db_connection_string <- ifelse(b_server,"driver={FreeTDS};servername=CBAS-PDDB-06;database=HR-REC-RAW-WKG",
"driver={SQl Server};server=CBAS-PDDB-06;database=HR-REC-RAW-WKG")
# open connection
conn <- dbConnect(odbc::odbc(),
.connection_string = db_connection_string)
# get data objects
# all vacancies
vac <- dbGetQuery(conn,
"select a.[vac_ID],
a.[Vacancy Form > Job Description] as description,
a.[Vacancy Form > Short summary] as summary,
b.[Textio score] as textio
FROM [HR-REC-RAW-WKG].[usr].[vacancy_data] as a
LEFT JOIN Textio_scores as b
ON a.Job_ref = b.[Vacancy reference]"
) %>% data.frame(stringsAsFactors = FALSE)
# all applicants and their gender
div <- dbGetQuery(conn,
"select [application_ID],
[vac_ID],
[user_ID],
[Diversity Monitoring > Gender] as gender,
[atsstatus_name] as status
FROM usr.application_diversity") %>% data.frame(stringsAsFactors = FALSE)
# close connection
dbDisconnect(conn)
vacPrep <- vac %>%
text_prep("description") %>%
rename(text = clean_description) %>%
select(-description, -summary)
# checking the text
sample(vacPrep[,3], 1)
source("functions/textPrep.R")
source("functions/textTokenClean.R")
vacPrep <- vac %>%
text_prep("description") %>%
rename(text = clean_description) %>%
select(-description, -summary)
# checking the text
sample(vacPrep[,3], 1)
# get vac text which is na, see if textio is too
vacPrep %>% group_by(is.na(text)) %>% count()
vacCheck <- vacPrep %>% filter(is.na(text))
divIDs <- div %>%
group_by(vac_ID) %>%
count() %>%
filter(n >= 10) %>%
pull(vac_ID)
# filter jobs with less than 10 applicants
# out of dataset and get the gender categories
# make dataframe wide and replace NA values
# combine to create other %metrics
divWide <- div %>%
filter(vac_ID %in% divIDs) %>%
group_by(vac_ID, gender) %>%
count() %>%
pivot_wider(names_from="gender", values_from = "n") %>%
replace_na(list(Man = 0, Woman = 0, `Prefer not to disclose` = 0, `NA`= 0, `Prefer to self-describe` = 0)) %>%
mutate(perc_woman = Woman/(Woman+Man+`Prefer not to disclose`+`NA`+`Prefer to self-describe`)) %>%
mutate(perc_man = Man/(Woman+Man+`Prefer not to disclose`+`NA`+`Prefer to self-describe`)) %>%
mutate(perc_pntd = `Prefer not to disclose`/(Woman+Man+`Prefer not to disclose`+`NA`+`Prefer to self-describe`)) %>%
mutate(perc_ptsd = `Prefer to self-describe`/(Woman+Man+`Prefer not to disclose`+`NA`+`Prefer to self-describe`)) %>%
mutate(perc_na = `NA`/(Woman+Man+`Prefer not to disclose`+`NA`+`Prefer to self-describe`))
# pivot longer for exploratory graphs
divLong <- divWide %>%
pivot_longer(cols = c("perc_woman", "perc_man", "perc_pntd", "perc_ptsd", "perc_na"),
names_to="category",
values_to="percentage") %>%
select(vac_ID, category, percentage)
# explore with some ggplots
divLong %>% ggplot() +
geom_freqpoly(mapping = aes(x = percentage, y = stat(count), colour= category)) +
labs(title = "Count distribution of percentage of applicant type per vacancy by applicant type",
subtitle = "Man and Woman categories have closer to normal distributions",
x = "Percentage of applicants per vacancy",
y = "Number of vacancies")
divLong %>% ggplot() +
geom_boxplot(mapping = aes(x = reorder(category, desc(percentage), FUN = median), y = percentage)) +
labs(title = "Spread of percentage of applicant type per vacancy by applicant type",
subtitle = "Median percentage of Woman is second highest",
x = "Gender category",
y = "Percentage of applicants per vacancy")
vacDiv <- divWide %>%
select(vac_ID, perc_woman, perc_man, perc_pntd, perc_ptsd, perc_na) %>%
left_join(vacPrep, by = "vac_ID")
summary(vacDiv$textio)
hist(vacDiv$textio)
boxplot(vacDiv$textio)
vacDiv %>% group_by(is.na(textio)) %>% count()
# examine distributions by whether or
# not there is a textio score - if no textio
# score does the distribution look different?
divLong %>%
left_join(vacDiv, by = "vac_ID") %>%
select(vac_ID, category, percentage, textio) %>%
ggplot() +
facet_wrap(~ (is.na(textio))) +
geom_freqpoly(mapping = aes(x = percentage, y = stat(count), colour= category)) +
labs(title = "Count distribution of percentage of applicant type per vacancy by applicant type",
subtitle = "Split by whether textio score is NA, FALSE = 212, TRUE = 333",
x = "Percentage of applicants per vacancy",
y = "Number of vacancies")
# explore with some ggplots
divLong %>% ggplot() +
geom_freqpoly(mapping = aes(x = percentage, y = stat(count), colour= category)) +
labs(title = "Count distribution of percentage of applicant type per vacancy by applicant type",
subtitle = "Man and Woman categories have closer to normal distributions",
x = "Percentage of applicants per vacancy",
y = "Number of vacancies") +
theme_minimal()
divLong %>% ggplot() +
geom_boxplot(mapping = aes(x = reorder(category, desc(percentage), FUN = median), y = percentage)) +
labs(title = "Spread of percentage of applicant type per vacancy by applicant type",
subtitle = "Median percentage of Woman is second highest",
x = "Gender category",
y = "Percentage of applicants per vacancy") +
theme_minimal()
# what status are records in each category?
# can use change visualisation on count
div %>%
replace_na(list(gender = "NA")) %>%
group_by(status, gender) %>%
count() %>%
ungroup() %>%
group_by(gender) %>%
dplyr::top_n(3, n) %>%
ggplot(aes(x = reorder_within(status, n, gender, sep=", "), y = n, fill = gender)) +
facet_wrap(~ gender, scales = "free", ncol = 2) +
geom_col() +
geom_text(aes(label=n)) +
coord_flip() +
labs(title = "Top three status categories for applications by gender",
subtitle = "Top status for Woman is Application deadline missed, different from Man",
x = "Status of applications",
y = "Number of applications") +
theme_minimal()
# examine distributions by whether or
# not there is a textio score - if no textio
# score does the distribution look different?
divLong %>%
left_join(vacDiv, by = "vac_ID") %>%
select(vac_ID, category, percentage, textio) %>%
ggplot() +
facet_wrap(~ (is.na(textio))) +
geom_freqpoly(mapping = aes(x = percentage, y = stat(count), colour= category)) +
labs(title = "Count distribution of percentage of applicant type per vacancy by applicant type",
subtitle = "Split by whether textio score is NA, FALSE = 212, TRUE = 333",
x = "Percentage of applicants per vacancy",
y = "Number of vacancies") +
theme_minimal()
vacDiv %>% group_by(is.na(text)) %>% count()
# tokenise, remove stopwords, lemmatize
# for both words and bigrams
vacDivWords <- vacDiv %>%
filter(!is.na(text)) %>%
select(vac_ID, text) %>%
text_tc("text")
vacDivBigrams <- vacDiv %>%
filter(!is.na(text)) %>%
select(vac_ID, text) %>%
text_tc("text", bigrams = TRUE)
# visualise the top words
# across the whole corpus of words
# and bigrams. words function also returns
# total words per job advert
vacDivWords %>%
select(-vac_ID, -total) %>%
count(word, sort=T) %>%
dplyr::top_n(20, n) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col(fill="#00447c") +
coord_flip() +
ggtitle("Top word counts") +
theme_minimal()
vacDivBigrams %>%
select(-vac_ID) %>%
count(bigram, sort=T) %>%
dplyr::top_n(20, n) %>%
mutate(bigram = fct_reorder(bigram, n)) %>%
ggplot(aes(bigram, n)) +
geom_col(fill="#00447c") +
coord_flip() +
ggtitle("Top bigram counts") +
theme_minimal()
# add in sentiment to divtext
vacSent <- sentiment_by(vacDiv$text)
vacDiv$vacSent <- vacSent$ave_sentiment
summary(vacDiv$vacSent)
hist(vacDiv$vacSent)
# add in emotion to divtext
vacEmot <- emotion_by(vacDiv$text)
# bar chart to visualise average
# of average emotions
vacEmot %>%
group_by(emotion_type) %>%
summarise(mean_emotion = mean(ave_emotion)) %>%
ggplot(aes(fct_reorder(emotion_type, mean_emotion), mean_emotion))  +
geom_col(fill="#00447c") +
coord_flip() +
labs(title = "Emotion scores for the whole text corpus",
x = "Mean emotion score of average emotion scores per vacancy",
y = "Emotion type") +
theme_minimal()
# visualise the top words
# across the whole corpus of words
# and bigrams. words function also returns
# total words per job advert
vacDivWords %>%
select(-vac_ID, -total) %>%
count(word, sort=T) %>%
dplyr::top_n(20, n) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col(fill="#00447c") +
coord_flip() +
labs(title = "Top word counts across all vacancies",
subtitle = "For job description text",
x = "Frequency",
y = "Word") +
theme_minimal()
vacDivBigrams %>%
select(-vac_ID) %>%
count(bigram, sort=T) %>%
dplyr::top_n(20, n) %>%
mutate(bigram = fct_reorder(bigram, n)) %>%
ggplot(aes(bigram, n)) +
geom_col(fill="#00447c") +
coord_flip() +
labs(title = "Top bigram counts across all vacancies",
subtitle = "For job description text",
x = "Frequency",
y = "Word") +
theme_minimal()
vacDivBigrams %>%
select(-vac_ID) %>%
count(bigram, sort=T) %>%
dplyr::top_n(20, n) %>%
mutate(bigram = fct_reorder(bigram, n)) %>%
ggplot(aes(bigram, n)) +
geom_col(fill="#00447c") +
coord_flip() +
labs(title = "Top bigram counts across all vacancies",
subtitle = "For job description text",
x = "Frequency",
y = "Bigram") +
theme_minimal()
# bar chart to visualise average
# of average emotions
vacEmot %>%
group_by(emotion_type) %>%
summarise(mean_emotion = mean(ave_emotion)) %>%
ggplot(aes(fct_reorder(emotion_type, mean_emotion), mean_emotion))  +
geom_col(fill="#00447c") +
coord_flip() +
labs(title = "Emotion scores for the whole text corpus",
x = "Mean emotion score of average emotion scores per vacancy",
y = "Emotion type") +
theme_minimal()
# bar chart to visualise average
# of average emotions
vacEmot %>%
group_by(emotion_type) %>%
summarise(mean_emotion = mean(ave_emotion)) %>%
ggplot(aes(fct_reorder(emotion_type, mean_emotion), mean_emotion))  +
geom_col(fill="#00447c") +
coord_flip() +
labs(title = "Average emotion scores for the whole text corpus",
x = "Emotion type",
y = "Mean emotion score of average emotion scores per vacancy") +
theme_minimal()
# pivot wider for joining to vac_div
vacEmot <- vacEmot %>%
select(-emotion_count, -sd, -word_count) %>%
pivot_wider(names_from = emotion_type, values_from = ave_emotion)
# important to use rowid_to_col id because vac_id
# is not equal to element_id
vacDiv <- vacDiv %>%
rowid_to_column() %>%
left_join(vacEmot, by = c("rowid" = "element_id")) %>%
select(-rowid) %>%
left_join(vacDivWords %>% select(-word) %>% unique(), by = "vac_ID")
############################################
# exploring text, textio and % applicant   #
############################################
# getting a correlation matrix of all the variables
# the use argument means that NA textio scores are removed
# for pairwise comparisons only without affecting
# the values in that observation for other comparisons
vacDivCor <- cor(vacDiv %>% select(-text), use = "pairwise.complete.obs")
# same for significance
vacDivCorP <- ggcorrplot::cor_pmat(vacDiv %>% select(-text), use = "pairwise.complete.obs")
vacDivCor %>%
ggcorrplot(type = "upper",
ggtheme = `ggplot2`::theme_light,
colors = c("#6D9EC1", "white", "#E46726"),
p.mat = vacDivCorP,
sig.level = 0.05,
insig = "blank",
lab = TRUE) +
labs(title = "Significant correlations between text elements and percentage applicants",
subtitle = "Correlations with the percentage applicant scores are weak")
# what are joyful words?
# the most joyful job is vac_ID 77
vacDivCor %>%
ggcorrplot(type = "upper",
ggtheme = `ggplot2`::theme_light,
colors = c("#6D9EC1", "white", "#E46726"),
p.mat = vacDivCorP,
sig.level = 0.05,
insig = "blank",
lab = TRUE) +
labs(title = "Significant correlations between text elements and percentage applicants",
subtitle = "Percentage Woman and Percetage Man have some weak average sentiment score relationships")
vacDiv <- vacDiv %>% mutate(topForWoman = ifelse(perc_woman >= 0.4, 1, 0))
vacDiv %>% group_by(topForWoman) %>% count()
# use tfidf to achieve the above
# first for words
vacDivWordCounts <- vacDivWords %>%
left_join(vacDiv %>%
select(vac_ID, topForWoman)) %>%
count(topForWoman, word, sort = T)
vacDivTfidf <- vacDivWordCounts %>%
bind_tf_idf(word, topForWoman, n) %>%
arrange(desc(tf_idf))
vacDivTfidf %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Vacancies with top quartile % applicants Woman against all other vacancies",
subtitle = "For words") +
theme_minimal()
# replicate for bigrams
vacDivBigramCounts <- vacDivBigrams %>%
left_join(vacDiv %>%
select(vac_ID, topForWoman)) %>%
count(topForWoman, bigram, sort = T)
vacDivTfidf <- vacDivBigramCounts %>%
bind_tf_idf(bigram, topForWoman, n) %>%
arrange(desc(tf_idf))
vacDivTfidf %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(bigram, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Vacancies with top quartile % applicants Woman against all other vacancies",
subtitle = "For bigrams") +
theme_minimal()
vacDivTfidf %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Vacancies with top quartile percantage applicants Woman against all other vacancies",
subtitle = "For words, 1 = in top quartile percentage applicants Woman, 0 = all others") +
theme_minimal()
vacDivTfidf %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Vacancies with top quartile percantage applicants Woman against all other vacancies",
subtitle = "For words, 1 = in top quartile percentage applicants Woman, 0 = all others") +
theme_minimal()
vacDivWordCounts <- vacDivWords %>%
left_join(vacDiv %>%
select(vac_ID, topForWoman)) %>%
count(topForWoman, word, sort = T)
vacDivTfidf <- vacDivWordCounts %>%
bind_tf_idf(word, topForWoman, n) %>%
arrange(desc(tf_idf))
vacDivTfidf %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Vacancies with top quartile percantage applicants Woman against all other vacancies",
subtitle = "For words, 1 = in top quartile percentage applicants Woman, 0 = all others") +
theme_minimal()
# replicate for bigrams
vacDivBigramCounts <- vacDivBigrams %>%
left_join(vacDiv %>%
select(vac_ID, topForWoman)) %>%
count(topForWoman, bigram, sort = T)
vacDivTfidf <- vacDivBigramCounts %>%
bind_tf_idf(bigram, topForWoman, n) %>%
arrange(desc(tf_idf))
vacDivTfidf %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(bigram, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Vacancies with top quartile percentage applicants Woman against all other vacancies",
subtitle = "For bigrams, 1 = in top quartile percentage applicants Woman, 0 = all others") +
theme_minimal()
vacDivWordCounts <- vacDivWords %>%
left_join(vacDiv %>%
select(vac_ID, topForWoman)) %>%
count(topForWoman, word, sort = T)
vacDivTfidf <- vacDivWordCounts %>%
bind_tf_idf(word, topForWoman, n) %>%
arrange(desc(tf_idf))
vacDivTfidf %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Top TF-IDF words for vacancies with top quartile percantage applicants Woman",
subtitle = "For words, 1 = in top quartile percentage applicants Woman, 0 = all others",
y = "TF-IDF score") +
theme_minimal()
# replicate for bigrams
vacDivBigramCounts <- vacDivBigrams %>%
left_join(vacDiv %>%
select(vac_ID, topForWoman)) %>%
count(topForWoman, bigram, sort = T)
vacDivTfidfBigram <- vacDivBigramCounts %>%
bind_tf_idf(bigram, topForWoman, n) %>%
arrange(desc(tf_idf))
vacDivTfidfBigram %>%
mutate(bigram = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(topForWoman) %>%
top_n(20) %>%
ungroup() %>%
ggplot(aes(bigram, tf_idf, fill = topForWoman)) +
geom_col(show.legend = FALSE, fill="#00447c") +
coord_flip() +
facet_wrap(~topForWoman, ncol=2, scales = "free") +
labs(title = "Top TF-IDF bigrams for vacancies with top quartile percantage applicants Woman",
subtitle = "For bigrams, 1 = in top quartile percentage applicants Woman, 0 = all others") +
theme_minimal()
View(divWide)
summary(divWide$perc_woman)
setwd("P:/Projects/beis-style")
usethis::create_package("P:/Projects/beis-style")
setwd("P:/Projects")
usethis::create_package("P:/Projects/beisics")
check()
usethis::check()
library(devtools)
check()
?check()
check(pkg = "P:/Projects/beisics")
check(pkg = "P:/Projects/beisics")
setwd("P:/Projects/beisics")
use_mit_license()
use_mit_license("Amy Andrews")
check(pkg = "P:/Projects/beisics")
use_r("beis_logo")
load_all()
setwd("P:/Projects")
beis_logo()
setwd("P:/Projects/beisics")
check()
load_all()
load_all()
setwd("P:/Projects")
beis_logo()
beis_logo(white_background = TRUE)
beis_logo()
beis_logo(white_background = TRUE)
load_all()
setwd("P:/Projects/beisics")
load_all()
setwd("P:/Projects")
beis_logo()
check()
setwd("P:/Projects/beisics")
check()
document()
check()
check()
check()
