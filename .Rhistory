ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white")
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
#colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, labs))
}
p + theme_beis()
ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg, fill = as.factor(gear))) +
ggplot2::geom_bar(stat="identity")
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg, fill = as.factor(gear))) +
ggplot2::geom_bar(stat="identity")
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white")
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims <- ggplot2::scale_x_continuous(expand = c(0,0), limits = c(0,NA)) +
ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs, scale_lims))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims_x <- ggplot2::scale_x_continuous(expand = c(0,0), limits = c(0,NA))
scale_limts_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs, scale_lims_x, scale_lims_y))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims_x <- ggplot2::scale_x_continuous(expand = c(0,0), limits = c(0,NA))
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs, scale_lims_x, scale_lims_y))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims_x <- ggplot2::scale_x_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs, scale_lims_x))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs, scale_lims_y))
}
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_color, colours_fill, labs, scale_lims_y))
}
p + theme_beis()
p + theme_beis() + ggplot2::coord_flip()
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
#colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_fill, labs, scale_lims_y))
}
p + theme_beis()
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg)) +
ggplot2::geom_bar(stat="identity")
p
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
#colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
# colours based on whether grouping var
# is discrete or continuous
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
bar_fill_defaults <- ggplot2::update_geom_defaults("bar", list = "#003366")
col_fill_default <- ggplot2::update_geom_defaults("col", list = "#003366")
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, bar_fill_defaults, col_fill_defaults, colours_fill, labs, scale_lims_y))
}
p + theme_beis()
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg)) +
ggplot2::geom_bar(stat="identity")
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
#colours_color <- ggplot2::scale_color_manual(values = beis_colours())
#colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
# colours based on whether grouping var
# is discrete or continuous
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
bar_fill_defaults <- ggplot2::update_geom_defaults("bar", list(fill = beis_colours()))
col_fill_default <- ggplot2::update_geom_defaults("col", list(fill = beis_colours()))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, bar_fill_defaults, col_fill_defaults, labs, scale_lims_y))
}
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
#colours_color <- ggplot2::scale_color_manual(values = beis_colours())
#colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
# colours based on whether grouping var
# is discrete or continuous
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
bar_fill_default <- ggplot2::update_geom_defaults("bar", list(fill = beis_colours()))
col_fill_default <- ggplot2::update_geom_defaults("col", list(fill = beis_colours()))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, bar_fill_default, col_fill_default, labs, scale_lims_y))
}
p + theme_beis()
ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg)) +
ggplot2::geom_bar(stat="identity")
p + theme_beis()
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg)) +
ggplot2::geom_bar(stat="identity")
output <- p + theme_beis
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
#colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
# colours based on whether grouping var
# is discrete or continuous
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
bar_fill_default <- ggplot2::update_geom_defaults("bar", list(fill = "#003366"))
col_fill_default <- ggplot2::update_geom_defaults("col", list(fill = "#003366"))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, bar_fill_default, col_fill_default, colours_fill, labs, scale_lims_y))
}
p + theme_beis()
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg, fill = as.factor(gear))) +
ggplot2::geom_bar(stat="identity")
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
#colours_color <- ggplot2::scale_color_manual(values = beis_colours())
colours_fill <- ggplot2::scale_fill_manual(values = beis_colours())
# colours based on whether grouping var
# is discrete or continuous
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
# bar_fill_default <- ggplot2::update_geom_defaults("bar", list(fill = "#003366"))
# col_fill_default <- ggplot2::update_geom_defaults("col", list(fill = "#003366"))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, colours_fill, labs, scale_lims_y))
}
p + theme_beis()
p <- ggplot2::ggplot(mtcars, ggplot2::aes(x=cyl, y=mpg)) +
ggplot2::geom_bar(stat="identity")
p + theme_beis()
theme_beis <- function(...){
ggtheme <-  ggplot2::theme(
#base_size = 11,
#base_family = "",
#base_line_size = base_size/22,
#base_rect_size = base_size/22,
text = ggplot2::element_text(size = 12),
axis.title = ggplot2::element_text(face = "bold"),
axis.title.y = ggplot2::element_text(margin = ggplot2::margin(0, 30, 0, 0,"pt")),
panel.background = ggplot2::element_rect(fill = "white", color = "white"),
panel.grid.major.y = ggplot2::element_line(colour = "grey"),
axis.line.x.bottom = ggplot2::element_line(colour = "grey"),
axis.line.y.left = ggplot2::element_line(colour = "white"),
legend.position = "none"
)
scale_lims_y <- ggplot2::scale_y_continuous(expand = c(0,0), limits = c(0,NA))
labs <- ggplot2::labs(x = NULL, y = NULL)
return(list(ggtheme, labs, scale_lims_y))
}
p + theme_beis()
# update ggplot defaults for different graphs
geom_params <- ls(pattern =  '^geom_', env = as.environment('package::ggplot2'))
# update ggplot defaults for different graphs
geom_params <- ls(pattern =  '^geom_', env = as.environment('package:ggplot2'))
# update ggplot defaults for different graphs
geom_params <- ls(pattern =  '^geom_', env = as.environment('ggplot2'))
library(ggplot2)
# update ggplot defaults for different graphs
geom_params <- ls(pattern =  '^geom_', env = as.environment('ggplot2'))
# update ggplot defaults for different graphs
geom_params <- ls(pattern =  '^geom_', env = as.environment('package:ggplot2'))
geom_params
geoms <- gsub("geom_", "", geom_params)
test()
test()
load_all()
get_beisics()
geom
geoms
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) %>%
dygraphs::dySeries(c("lwr"), label = "Deaths") %>%
dygraphs::dyOptions(colours = RColorBrewer::brewer.pal(2, "Set1"))
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) %>%
#dygraphs::dySeries(c("lwr"), label = "Deaths") %>%
dygraphs::dyOptions(colours = RColorBrewer::brewer.pal(2, "Set1"))
# trying a dygraph
dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) #%>%
# build a function
usethis::use_r(name = "theme_beis_dygraph")
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", drawGrid = FALSE) %>%
dyCSS(beis_css())
}
# trying a dygraph
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE) #%>%
d %>% theme_beis_dygraph()
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", dygraphs::drawGrid = FALSE) %>%
dygraphs::dyCSS(beis_css())
}
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", dygraphs::drawGrid = FALSE) %>%
dygraphs::dyCSS(beis_css())
}
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", dygraphs::drawGrid = FALSE) %>%
dygraphs::dyCSS(beis_css())
}
beis_css()
beis_css <- function(copy_to = getwd()){
assertthat::assert_that(is.character(copy_to))
get_beis_css(copy_to = copy_to)
css_path <- paste0(copy_to, "/beis_css.css")
return(css_path)
}
beis_css()
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", dygraphs::drawGrid = FALSE) %>%
dygraphs::dyCSS(beis_css())
}
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", drawGrid = FALSE) %>%
dygraphs::dyCSS(beis_css())
}
d %>% theme_beis_dygraph()
use_test("theme_beis_dygraph")
class(d)
testthat::test_that("test expected behaviour for theme_beis_dygraph function", {
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE)
output <- d %>% theme_beis_dygraph()
testthat::expect_s3_class(output, "dygraphs")
})
test()
d %>% theme_beis_dygraph() %>% dygraphs::dyOptions(colours = RColorBrewer::brewer.pal(2, "Set1"))
t <- RColorBrewer::brewer.pal(2, "Set1")
d %>% theme_beis_dygraph() %>% dygraphs::dyOptions(colors = RColorBrewer::brewer.pal(2, "Set1"))
theme_beis_dygraph <- function(dygraph, ...){
dygraphs::dyAxis(dygraph, "y", drawGrid = FALSE) %>%
dygraphs::dyCSS(beis_css()) %>%
dygraphs::dyOptions(colors = beis_colours())
}
d %>% theme_beis_dygraph()
check(cran = FALSE)
usethis::use_package("magrittr")
check(cran = FALSE)
load_all()
document()
test()
check(cran = FALSE)
usethis::use_package("dygraphs")
check(cran = FALSE)
document()
load_all()
load_all()
document()
document()
check(cran = FALSE)
use_pipe()
document()
check(cran = FALSE)
document()
check(cran = FALSE)
rm(theme_beis_dygraph())
d <- dygraphs::dygraph(cbind(mdeaths, fdeaths), main = "title") %>%
dygraphs::dyAxis("y", drawGrid = FALSE)
output <- d %>% theme_beis_dygraph()
output
build(binary=TRUE)
build(binary=FALSE)
devtools::install_git(
"http://cbas-pdcm-01/all_data_science/beisics",
credentials = git2r::cred_user_pass("andrewsa", getPass::getPass())
)
